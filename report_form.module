<?php
//Add css file
drupal_add_css(drupal_get_path('module', 'report_form') . "/css/report_form.css");
global $user;

define('REPORTING_FORM_MODE_BLOCK_VIEW', 1);
define('REPORTING_FORM_MODE_APPLY_LINK', 2);

/**
 * Implements hook_help().
 */
function report_form_help($path, $arg) {
  // Declare the output variable.
  $output = '';

  switch ($path) {
    case "admin/help#report_form":
      $output = '<p>' . t("Displays report form link under a node") . '</p>';
      break;
  	}
    return $output;
}

/**
* Implementation of hook_menu().
*/
function report_form_menu() {
	//$items = array();	 
  
		$menu = array();
		$menu['admin/config/system/report_form'] = array(
		'title' => 'Report form',
		'description' => 'Configure Report Form On Node',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('report_form_settings'),
		'access arguments' => array('administer report_form'),
		'file' => 'report_form.admin.inc',
		);
		
		return $menu;
	  }

/*
* implement hook_form
*/

function report_form_form($form, &$form_state) {
	global $user;
	$nid = arg(1);
	$node = node_load(arg(1));
	
	$form = array();
 	$form['report_form_name'] = array(
  		'#type' => 'textfield',
		'#title' => t('My Name'),
		'#default_value' => variable_get('report_form_name', ''),
  		'#value' =>  $user->name,
  		'#required' => TRUE,
 		);
  	$form['title'] = array(
  		'#type' => 'textfield',
  		'#title' => t('Project Title'),
  		'#value' =>  drupal_get_title($nid),
  		'#default_value' => variable_get('title', ''),
  		'#required' => TRUE,
 		);
 	$form['amount'] = array(
  		'#type' => 'hidden',
  		'#title' => t('Amount'),
  		'#default_value' => variable_get('amount', ''),
  		//'#required' => TRUE,
 		);
  	$form['cover_letter'] = array(
  		'#type' => 'textarea',
  		'#title' => t('Description '),
 		'#required' => TRUE,
 		);
 	$form['uid'] = array(
    	'#type' => 'hidden',
	  	'#title' => t('user id'),
      	'#value' => $user->uid,
	  	'#default_value' => variable_get('uid', ''),
 		);
 	$form['node_id'] = array(
      	'#type' => 'hidden',
	  	'#title' => t('node id'),
      	'#value' => $nid,
	  	'#default_value' => variable_get('node_id', ''),
 		);
	$form['picture'] = array(
    	'#type' => 'file',
    	'#title' => t('Upload picture'),
		'#type' => 'managed_file',
    	'#description' => t('Upload image maximum @filesize. ', array(
        '@filesize' => format_size(file_upload_max_size()),
    			)
			),
		'#upload_location' => 'public://',
		'#upload_validators'  => array("file_validate_extensions" => array("png gif jpg")),
 		 );
 	$form['options']['reset'] = array(
  		'#type' => 'submit',
  		'#value' => t('Reset'),
  		'#submit' => array('report_form_reset'),
   		);
	
 	$form['submit'] = array(
  		'#type' => 'submit',
  		'#value' => t('Submit'),
 		);
	$form['#submit'][] = 'report_form_form_submit';
 	return $form;
}


function report_form_reset($form, &$form_state) {
	$form_state['rebuild'] = FALSE;
	}
	
/**
* Data add into database
**/
function report_form_form_submit($form, &$form_state) {
	global $user;
	$nid = arg(1);
 
	db_insert('report_form')
    ->fields(array(
    	'title' => drupal_get_title($nid),
	  	'cover_letter' => $form_state['values']['cover_letter'],  
	  	'user_name' => $form_state['values']['report_form_name'], 
	  	'uid' => $form_state['values']['uid'],
	   	'fid' => $form_state['values']['picture'],
	   	'nid' => $nid,
	  	))->execute();
		drupal_set_message(t('Submitted Successfully!'));

	 if (isset($form_state['values']['picture'])) {
		$file = file_load($form_state['values']['picture']);
	
		$file->status = FILE_STATUS_PERMANENT;
	
		file_save($file);
	  }


}


//form end


/*
* implement hook_block_info
*/

function report_form_block_info() {
	$blocks['report_form'] = array(
    	'info' => t('report form'), 
    	'cache' => DRUPAL_NO_CACHE,
  		);
		return $blocks;
	}





//Create function to be used in block

function report_form_block_view(){
	$form = drupal_get_form('report_form_form');
	global $content;
  	$content .= '<button class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-lg">Apply</button>';
  	$content .= '<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">';
  	$content .= '<div class="modal-dialog modal-lg">';
  	$content .= '<div class="modal-content">';
  	$content .= drupal_render($form);
  	$content .= '</div>';
  	$content .= '</div>';
  	$content .= '</div>';
	return $content;
	}

/**
 * Implements hook_node_view().
 */
function report_form_node_view($node, $view_mode) {
  // Do we show the link?
  $show_link = variable_get('report_form_show_link', FALSE);
  // Do we show the form?
  $show_form = variable_get('report_form_show_form', TRUE);
  // Are we in teaser?
  if ($view_mode == "teaser") {
    $show_link = variable_get('report_form_show_link_in_teaser', TRUE);
    $show_form = variable_get('report_form_show_form_in_teaser', FALSE);
  }

  if ($show_form) {
    // Get the list of enabled content types.
    $enabled_types = variable_get('report_form_types', array());
    // If the form was enabled for this node type, go to the next level.
    if (!empty($enabled_types) && $enabled_types[$node->type] != "0") {
		$mode = variable_get('report_form_mode', REPORTING_FORM_MODE_APPLY_LINK);
      	switch ($mode) {
			
			case REPORTING_FORM_MODE_BLOCK_VIEW:
			if (user_access('access content')) {
			/*
			* implement hook_block_view
			*/
						
			function report_form_block_view($delta = '') {
								$block = array();
								switch ($delta) {
									case 'report_form':							
										$block['subject'] = t('Reporting Form');
										$block['content'] = report_form_block_view();
									break;	
									}
								return $block;
								}
			}
				    	
			break;
			
        	case REPORTING_FORM_MODE_APPLY_LINK:
				global $user;
				// If the current user is allowed to use the site wide form,
          		// display it.
				 if ($node->uid = $user->uid) {
				
					$node->content['report_form'] = array(				
					'#type' => 'fieldset',
					'#title' => t('Report Form'),
					'#weight' => 99,
					);				
						if (user_access('access content')) {
							$node->content['report_form']['report_form'] = drupal_get_form('report_form_form');
							}
	         
			break;
      }
    }
  }

  // Set the page title.
  if ($view_mode == "page") {
    drupal_set_title($node->title);
  }
  }}

/**
 * Implements hook_views_api().
 */

function report_form_views_api()
{
    return array(
         'api' => '3.0',
         'path'  =>  drupal_get_path('module', 'report_form'). '/views', 
         );
}

/**
 * Implements hook_views_default_views().
 */
function report_form_views_default_views() {
  $path = drupal_get_path('module', 'report_form') . '/views/default_views/*.inc';
  $views = array();
  foreach (glob($path) as $views_filename) {
    require_once($views_filename);
  }
  return $views;
}
